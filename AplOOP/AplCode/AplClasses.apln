:NameSpace AplClasses
:Using System
:Using DotNetClasses,.\DotNetClasses.dll
:Using AplBaseClasses,.\AplBase.dll
:Using AplBaseClasses1,.\AplBase1.dll

⍝     :Class Calculator : AplBase1
    :Class Calculator : AplBase
        ∇ Make
          :Access Public Instance
          :Implements Constructor :Base
          :Signature Calculator
        ∇

        ∇ res←Sum args;ex
          :Access Public
          :Signature Int64←Sum Int32[] args
          :Signature Double←SumDouble Double[] args
          :Signature Decimal←Sum Decimal[] args
          :If 2>⊃⍴args
              ex←GetException(⊂'At least 2 numbers are required in the argument')
              ex ⎕SIGNAL 90
⍝             We would really like to be able to make the below call rather than having to make a ⎕SIGMAL call here!
⍝             throwExitSpecException(⊂'At least 2 numbers are required in the argument')
          :EndIf
          res←+/args
        ∇

        ∇ res←Divide(a b);ex
          :Access Public
          :Signature Int32←Divide Int32 divisor, Int32 dividend
          res←a÷b
        ∇

    :EndClass

    :Class ClassWithDispose : AplBase, IDisposable
    :Using System
        :Field Private Instance vBigVar

        ∇ Make
          :Implements Constructor :Base
          :Access Public
          :Signature ClassWithDispose
        ∇

        ∇ res←GetNewInstance number;ex
          :Access Public
          :Signature AplClasses.NewClass←GetNewInstance Int32 number
          res←⎕NEW AplClasses.NewClass number
        ∇

        ∇ res←Sum args;ex
          :Access Public
          :Signature Int64←Sum Int32[] args
          :If 2>⊃⍴args
              ex←⎕NEW Exception(⊂'At least 2 numbers are required in the argument')
              ex ⎕SIGNAL 90
          :EndIf
          res←+/args
        ∇

        ∇ res←Divide(dividend divisor);ex;xs
          :Access Public
          :Signature Int64←Divide Int32 dividend, Int32 divisor
          res←dividend÷divisor
        ∇

        ∇ res←WsAwail
          :Access Public
          :Signature Int32←WsAwail
          res←⌊⎕WA÷1024
        ∇

        ∇ res←MakeBigVar arg;rows;cols;content;ex
          :Access Public
          :Signature MakeBigVar Int32 rows, Int32 cols, String content
          rows cols content←arg
          vBigVar←(rows cols)⍴⊂content
        ∇

        ∇ res←GetBigVar
          :Access Public
          :Signature Object←GetBigVar
          res←vBigVar
        ∇

        ∇ DisposeImpl
          :Implements Method IDisposable.Dispose
          destruct
        ∇

        ∇ destruct;sink
          :Implements Destructor
          ⍝ Cleanup!
        ∇

    :EndClass

    :Class TestSystemErrors : AplBase

        ∇ Make
          :Implements Constructor :Base
          :Access Public
          :Signature TestSystemErrors
        ∇

        ∇ TryCreateAPLCore;ex
          :Access Public
          :Signature TryCreateAPLCore
          :Trap 0
              ⎕NA'dyalog64|MEMCPY U U U'
              MEMCPY 255 255 255
          :Else
              ex←⎕NEW Exception,⊂⊂'WOW!! We just trapped an APL core!'
              ex ⎕SIGNAL 90
          :EndTrap
        ∇

    :EndClass

    :Class NewClass : IDisposable
        :Field Private Instance vNumber

        ∇ Make number
          :Implements Constructor
          :Access Public
          :Signature TestClass Int32 number
          vNumber←number
        ∇

        :Property Number
        :Access Public
            ∇ number←get
              :Signature Int32←Id
              number←vNumber
            ∇
        :EndProperty

        ∇ DisposeImpl
          :Implements Method IDisposable.Dispose
          destruct
        ∇

        ∇ destruct;sink
          :Implements Destructor
          ⍝ Cleanup!
        ∇

    :EndClass

    :Class CodeFile
    :Using System

        ∇ Make
          :Implements Constructor
          :Access Public
          :Signature CodeFile
        ∇

        ∇ CreateLookUp(file length)
          :Access Public
          :Signature CreateLookUp String file, Int32 length
          'Cache'#.⎕NS''
          #.Cache.LookUp←(⍳length)∘⍳
          #.Cache.LookUp 9
          (,⊂'Cache')#.(8669⌶)1 file
        ∇

        ∇ CreateSimpleCodeFile file
          :Access Public
          :Signature CreateSimpleCodeFile String file
          #.fn1←{⍳⍵}
          (,⊂'fn1')#.(8669⌶)1 file
        ∇

        ∇ CreateCodeFile file;names
          :Access Public
          :Signature CreateCodeFile String file
          names←#.⎕NL 3
          names #.(8669⌶)1 file
        ∇

        ∇ LoadWS file
          :Access Public
          :Signature LoadWS String file
          #.⎕CY file
        ∇

        ∇ CreateCodeFileFromFolder(slot file sourcefolder);files;names;sink
          :Access Public
          :Signature CreateCodeFileFromFolder Int32 slot, String file, String sourcefolder
          files←⊃⎕NINFO⍠('Recurse' 1)('Wildcard' 1)⊢sourcefolder,'\*.aplf'
          names←⊃,/2 #.⎕FIX¨(⊂'file://'),¨files
         ⍝ sink←#.(5178⌶)¨names
          names #.(8669⌶)slot file
        ∇

        ∇ Execute expr
          :Access Public
          :Signature Execute String expr
          ⍎expr
        ∇

        ∇ AttachCodeFiles(files)
          :Access Public
          :Signature AttachCodeFiles String[] files
          #.(8668⌶)files
        ∇

        ∇ GenerateTfns fn;∆;sfns;⎕IO;subs;sub;l;r;s
          :Access Public
          :Signature GenerateTfns String fn 
          ⎕IO←0
          ∆←''
          ∆,←⊂'c←a ',fn,' b'
          ∆,←⊂'a b-←1'
          :If 4<≢fn
              ∆,←⊂'c←a+b+',⍕?10
          :Else
              sfns←(⊂fn),¨⍕¨⍳10
              GenerateTfns¨sfns
              ∆,←⊂'c←',⍕?10
              subs←100(?⍴)10
              :For sub :In subs
                  l r←'abc'[?3 3]
                  ∆,←⊂'c←',l,' ',fn,(⍕sub),' ',r
              :EndFor
          :EndIf
         
          s←#.⎕FX ∆
        ∇

        ∇ r←WSCheck
          :Access Public
          :Signature Int32←WSCheck
          r←2 ⎕NQ'.' 'wscheck'
        ∇

    :EndClass
:EndNamespace
